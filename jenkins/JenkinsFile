pipeline {
  agent any

  environment {
    AWS_REGION = 'ap-southeast-2'
    AWS_ACCOUNT = '715841372170'
    ECR_REPO_NAME = 'sample-app-repo'
    ECR_URL = "${AWS_ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO_NAME}"
    LAMBDA_FUNCTION = 'ecr-postprocessor'   // Name of your Lambda function
  }

  stages {
    stage('Checkout Code') {
      steps {
        checkout scm
        script {
          env.COMMIT_HASH = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
          env.IMAGE_TAG = "${COMMIT_HASH}"    // you can also use "build-${BUILD_NUMBER}" if preferred
          echo "Using Image Tag: ${IMAGE_TAG}"
        }
      }
    }

    stage('Build Docker Image') {
      steps {
        dir('app') {
          sh "docker build -t ${ECR_REPO_NAME}:${IMAGE_TAG} ."
        }
      }
    }

    stage('Login to ECR & Push Image') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'aws-creds-id', usernameVariable: 'AWS_ID', passwordVariable: 'AWS_SECRET')]) {
          sh '''
            export AWS_ACCESS_KEY_ID=$AWS_ID
            export AWS_SECRET_ACCESS_KEY=$AWS_SECRET
            aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com
            docker tag ${ECR_REPO_NAME}:${IMAGE_TAG} ${ECR_URL}:${IMAGE_TAG}
            docker push ${ECR_URL}:${IMAGE_TAG}
          '''
        }
      }
    }

    stage('Trigger Lambda for Logging') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'aws-creds-id', usernameVariable: 'AWS_ID', passwordVariable: 'AWS_SECRET')]) {
          sh '''
            export AWS_ACCESS_KEY_ID=$AWS_ID
            export AWS_SECRET_ACCESS_KEY=$AWS_SECRET
            aws lambda invoke \
              --function-name ${LAMBDA_FUNCTION} \
              --payload "{ \\"repository\\": \\"${ECR_REPO_NAME}\\", \\"tag\\": \\"${IMAGE_TAG}\\" }" \
              --region ${AWS_REGION} \
              response.json
            echo "Lambda Triggered for Tag: ${IMAGE_TAG}"
          '''
        }
      }
    }
  }

  post {
    success {
      echo "Docker image successfully pushed to ECR with tag: ${IMAGE_TAG}"
    }
    failure {
      echo "Build failed."
    }
  }
}
